name : Build Addon - Automation

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: "0"


      - name: Setup Java version
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'zulu'

      - name: Install xmlstarlet
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet
          changed_files=$(git diff --name-only "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}")      
          echo "Changed files : $changed_files"

      - name: Detect changed directories
        id: changes
        run: |
          changed_files=$(git diff --name-only "${{ github.event.pull_request.base.sha }}" "${{ github.event.pull_request.head.sha }}")
          echo "Changed files : $changed_files"
          changed_dirs=$(dirname $changed_files | sort -u)
          echo "Changed files : $changed_dirs"
          root_dirs=()
          for dir in $changed_dirs; do
            if [[ $dir != *".github"* ]]; then
              relative_dir=$(dirname "$dir")
              echo "Relative : $relative_dir"
              while [[ ! -f "$relative_dir/pom.xml" ]]; do
                relative_dir=$(dirname "$relative_dir")
                echo "-- relative : $relative_dir"
              done
              root_dirs+=("$relative_dir")
            fi
          done
          echo "::set-output name=directories::${root_dirs[@]}"

      - name: Display changed directories
        run: |
          echo "Changed directories: ${{ steps.changes.outputs.directories }}"

      - name: Build and commit changes
        run: |
          for dir in ${{ steps.changes.outputs.directories }}; do
            echo "Building $dir"
            cd $dir
            pwd
            version=$(xmlstarlet sel -t -v "/*[local-name()='project']/*[local-name()='version']" -n pom.xml)
            echo "-- Version $version"
            mvn clean install
            ls 
            ls target
            echo "Creating an archive" 
            zip -r ../$dir_source.zip .
            echo "Copy build files to the /build/$version/ location"
            sudo mkdir -p /build/$version && cp /target/$dir.jar /target/original-$dir.jar ../$dir_source.zip/ /build/$version/
            cd /build/$version
            pwd
            ls
            echo "Committing the changes"
            git add .
            git commit -m "build files added to the path $dir/build/$version"
            git push
            cd ../../../
          done
          
      



